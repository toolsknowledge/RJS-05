                                        Rest API Examples
                                        =================

    - axios is the 3rd party library, used to make the rest api calls.

    - axios library we will download by using "yarn" tool.

step 1.
    create the react project

    > npx create-react-app rest-ex --tempate typescript

step 2.
    switch to react application

    > cd rest-ex

step 3.
    download the axios library

    > yarn add axios --save

step 4.
    create the modal

    //https://www.w3schools.com/angular/customers.php


    ****************************************
    rest-ex
          src
            modal
              Customers.tsx
    ****************************************

    finally "Customers" and "Customer" modal are ready.

step 5.
    create the component

    *****************************************
    rest-ex
         src
           RestEx.tsx
    *****************************************


                                        **** MERN STACK DEVELOPMENT ****
        M - MongoDB

        E - ExpressJS

        R - ReactJS

        N - NodeJS

        we are using "ReactJS" as Front End.

        we will use "NodeJS" as Backend.

        we will use "MongoDB" as DataBase.

        we will use "ExpressJS" to develop Rest Services.

        GET

        POST

        PUT

        DELETE

        ---
        ---
        ---

MongoDB
-------
    - MongoDB is NoSQL DataBase (Won't Supports Either SQL or PLSQL).

    - MongoDB Supports the "JSON".

    - MongoDB DataBase is "Light Weight" DataBase.

Terminology
===========
                        SQL                                 NoSQL


    - Support Both SQL & PLSQL                      Wont Supports SQL or PLSQL.

    - MySQL, SQLServer,Oracle,...                   MongoDB

    - Won't Supports JSON                           Supports JSON.

    - Tables                                        Collection

    - DataBase                                      DataBase

    - Rows                                          Records

    - Primary Key                                   _id


    - MongoDB DataBase provides cloud support.

                URL : https://account.mongodb.com/account/login











implementation of MERN Stack application
========================================
1) deploy images to s3 bucket

    P1_Image : https://rjs05.s3.ap-south-1.amazonaws.com/p1.jpg

    P2_Image : https://rjs05.s3.ap-south-1.amazonaws.com/p2.jpg

    P3_Image : https://rjs05.s3.ap-south-1.amazonaws.com/p3.jpg

    P4_Image : https://rjs05.s3.ap-south-1.amazonaws.com/p4.jpg

    P5_Image : https://rjs05.s3.ap-south-1.amazonaws.com/p5.jpg

    P6_Image : https://rjs05.s3.ap-south-1.amazonaws.com/p6.jpg


2) create the database in mongodb.


        DataBase Details:
        =================

        mongodb+srv://admin:admin@rjs-05.1glav.mongodb.net/MERN?retryWrites=true&w=majority


        uname : admin

        password : admin

        database : MERN

        collection : products


3) create the Node Server

    - "Node Server" is used to create the "Rest" API'S with the help of "ExpressJS".

    - we will develop Node application with the help of "JavaScript".

    - Node Supports the libraries.


=> mongodb

    - used to connect to "mongodb" database.


=> express

    - used to develop the "Rest" Services.

    Ex.
        GET
        POST
        PUT
        DELETE
        ---
        ---
        ---

=> body-parser

    - body-parser used to receive the data from Frontend.


=> cors

    - used to enable the "cors" policy.


    we will download above libraries with the help of "yarn" tool

    above libraries downloads to "node_modules" folder in current path.

step 1.
    create the folder

    Ex.
        server

step 2.
    switch to server folder

    > cd server



step 3.
    download the libraries.

    @mongodb

    @express

    @body-parser

    @cors

    > yarn mongodb express body-parser cors --save

                or

    > npm install mongodb express body-parser cors --save

Note : all the libraries downloads to "node_modules" folder in current path

step 4.
    create the server file

    server.js

step 5.
    start the node server


    > node server


step 6.
    test the rest api by using "Postman".


   http://localhost:8080/products    (GET)


step 7.
    create the react application

    > npx create-react-app mern-app --template typescript

step 8.
    switch to react application

    > cd mern-app


step 9.
    download axios module

    => axios module used to make the rest api calls.

    => we will download axios module with the help of either yarn tool or npm tool.

    > yarn add axios --save


step 10.
    create the component

    ************************************
    mern-app
           src
             Products.tsx

             index.tsx

            public
              index.html
    **************************************






































































































































